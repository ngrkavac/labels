// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.cr.labels.service.impl;

import com.cr.labels.domain.Label;
import com.cr.labels.domain.LabelTranslation;
import com.cr.labels.repository.GlobalSearch;
import com.cr.labels.repository.LabelTranslationRepository;
import com.cr.labels.service.LabelTranslationService;
import com.cr.labels.service.impl.LabelTranslationServiceImpl;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect LabelTranslationServiceImpl_Roo_Service_Impl {
    
    declare parents: LabelTranslationServiceImpl implements LabelTranslationService;
    
    declare @type: LabelTranslationServiceImpl: @Service;
    
    declare @type: LabelTranslationServiceImpl: @Transactional(readOnly = true);
    
    public LabelTranslationRepository LabelTranslationServiceImpl.labelTranslationRepository;
    
    @Autowired
    public LabelTranslationServiceImpl.new(LabelTranslationRepository labelTranslationRepository) {
        this.labelTranslationRepository = labelTranslationRepository;
    }

    @Transactional(readOnly = false)
    public LabelTranslation LabelTranslationServiceImpl.save(LabelTranslation entity) {
        return labelTranslationRepository.save(entity);
    }
    
    @Transactional(readOnly = false)
    public void LabelTranslationServiceImpl.delete(Long id) {
         labelTranslationRepository.delete(id);
    }
    
    @Transactional(readOnly = false)
    public List<LabelTranslation> LabelTranslationServiceImpl.save(Iterable<LabelTranslation> entities) {
        return labelTranslationRepository.save(entities);
    }
    
    @Transactional(readOnly = false)
    public void LabelTranslationServiceImpl.delete(Iterable<Long> ids) {
        List<LabelTranslation> toDelete = labelTranslationRepository.findAll(ids);
        labelTranslationRepository.deleteInBatch(toDelete);
    }
    
    public List<LabelTranslation> LabelTranslationServiceImpl.findAll() {
        return labelTranslationRepository.findAll();
    }
    
    public List<LabelTranslation> LabelTranslationServiceImpl.findAll(Iterable<Long> ids) {
        return labelTranslationRepository.findAll(ids);
    }
    
    public LabelTranslation LabelTranslationServiceImpl.findOne(Long id) {
        return labelTranslationRepository.findOne(id);
    }
    
    public long LabelTranslationServiceImpl.count() {
        return labelTranslationRepository.count();
    }
    
    public Page<LabelTranslation> LabelTranslationServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return labelTranslationRepository.findAll(globalSearch, pageable);
    }
    
    public Long LabelTranslationServiceImpl.countByLabelId(Long id) {
        return labelTranslationRepository.countByLabelId(id);
    }
    
    public Page<LabelTranslation> LabelTranslationServiceImpl.findAllByLabel(Label labelField, GlobalSearch globalSearch, Pageable pageable) {
        return labelTranslationRepository.findAllByLabel(labelField, globalSearch, pageable);
    }
    
}
