// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.cr.labels.web;

import com.cr.labels.domain.Attachment;
import com.cr.labels.domain.Label;
import com.cr.labels.domain.LabelTranslation;
import com.cr.labels.web.LabelControler;
import java.lang.SuppressWarnings;
import java.net.URI;
import java.util.Collection;
import java.util.List;
import javax.validation.Valid;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.UriComponents;
import org.springframework.web.util.UriComponentsBuilder;

privileged aspect LabelControler_Roo_JSON {
    
    @RequestMapping(method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public ResponseEntity LabelControler.create(@Valid @RequestBody Label label, BindingResult result) {
        
        if (label.getId() != null) {
            return new ResponseEntity(HttpStatus.CONFLICT);
        }
        
        if (result.hasErrors()) {
            return new ResponseEntity(result, HttpStatus.CONFLICT);
        }
        
        Label newLabel = labelService.save(label);
        HttpHeaders responseHeaders = populateHeaders(newLabel.getId());
        
        return new ResponseEntity(newLabel, responseHeaders, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{label}", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public ResponseEntity LabelControler.update(@Valid @RequestBody Label label, BindingResult result) {
        
        if (result.hasErrors()) {
            return new ResponseEntity(result, HttpStatus.CONFLICT);
        }
        
        Label savedLabel = labelService.save(label);
        
        return new ResponseEntity(savedLabel, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/batch", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public ResponseEntity LabelControler.createBatch(@Valid @RequestBody Collection<Label> labels, BindingResult result) {
        
        if (result.hasErrors()) {
            return new ResponseEntity(result, HttpStatus.CONFLICT);
        }
        
        List<Label> newLabels = labelService.save(labels);
        
        return new ResponseEntity(newLabels, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/batch", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public ResponseEntity LabelControler.updateBatch(@Valid @RequestBody Collection<Label> labels, BindingResult result) {
        
        if (result.hasErrors()) {
            return new ResponseEntity(result, HttpStatus.CONFLICT);
        }
        
        List<Label> savedLabels = labelService.save(labels);
        
        return new ResponseEntity(savedLabels, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/batch/{ids}", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    @SuppressWarnings({ "rawtypes" })
    public ResponseEntity LabelControler.deleteBatch(@PathVariable("ids") Collection<Long> ids) {
        
        labelService.delete(ids);
        
        return new ResponseEntity(HttpStatus.OK);
    }
    
    public HttpHeaders LabelControler.populateHeaders(Long id) {
        UriComponents uriComponents = UriComponentsBuilder.fromUriString("/labels/{id}").build();
        URI uri = uriComponents.expand(id).encode().toUri();
        
        HttpHeaders responseHeaders = new HttpHeaders();
        responseHeaders.setLocation(uri);
        return responseHeaders;
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public ResponseEntity LabelControler.show(@PathVariable("id") Long id) {
        
        Label label = labelService.findOne(id);
        
        if (label == null) {
            return new ResponseEntity(HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity(label, HttpStatus.FOUND);
    }
    
}
