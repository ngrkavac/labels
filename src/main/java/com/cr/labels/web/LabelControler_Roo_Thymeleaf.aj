// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.cr.labels.web;

import com.cr.labels.datatables.DatatablesData;
import com.cr.labels.datatables.DatatablesPageable;
import com.cr.labels.domain.Label;
import com.cr.labels.domain.LabelTranslation;
import com.cr.labels.repository.GlobalSearch;
import com.cr.labels.web.LabelControler;
import javax.validation.Valid;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

privileged aspect LabelControler_Roo_Thymeleaf {
    
    @RequestMapping(method = RequestMethod.GET, produces = MediaType.TEXT_HTML_VALUE)
    public String LabelControler.list(Model model) {
        return "labels/list";
    }
    
    @RequestMapping(method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public Page<Label> LabelControler.list(GlobalSearch search, Pageable pageable) {
        Page<Label> label = labelService.findAll(search, pageable);
        return label;
    }
    
    @RequestMapping(method = RequestMethod.GET, produces = "application/vnd.datatables+json")
    @ResponseBody
    public DatatablesData<Label> LabelControler.list(GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        Page<Label> label = list(search, pageable);
        long allAvailableLabel = labelService.count();
        return new DatatablesData<Label>(label, allAvailableLabel, draw);
    }
    
    @RequestMapping(value = "/create-form", method = RequestMethod.GET, produces = MediaType.TEXT_HTML_VALUE)
    public String LabelControler.createForm(Model model) {
        model.addAttribute(new Label());
        populateForm(model);
        return "labels/create";
    }
    
    @RequestMapping(method = RequestMethod.POST, produces = MediaType.TEXT_HTML_VALUE)
    public String LabelControler.create(@Valid @ModelAttribute Label label, BindingResult result, RedirectAttributes redirectAttrs, Model model) {
        if (result.hasErrors()) {
            populateForm(model);
            return "labels/create";
        }
        Label newLabel = labelService.save(label);
        redirectAttrs.addAttribute("id", newLabel.getId());
        return "redirect:/labels/{id}";
    }
    
    @RequestMapping(value = "/{label}/edit-form", method = RequestMethod.GET, produces = MediaType.TEXT_HTML_VALUE)
    public String LabelControler.editForm(@PathVariable("label") Label label, Model model) {
        populateForm(model);
        return "labels/edit";
    }
    
    @RequestMapping(value = "/{label}", method = RequestMethod.PUT, produces = MediaType.TEXT_HTML_VALUE)
    public String LabelControler.update(@Valid @ModelAttribute Label label, BindingResult result, RedirectAttributes redirectAttrs, Model model) {
        if (result.hasErrors()) {
            populateForm(model);
            return "labels/edit";
        }
        Label savedLabel = labelService.save(label);
        redirectAttrs.addAttribute("id", savedLabel.getId());
        return "redirect:/labels/{id}";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = MediaType.TEXT_HTML_VALUE)
    public String LabelControler.delete(@PathVariable("id") Long id, Model model) {
        labelService.delete(id);
        return "redirect:/labels";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public ResponseEntity LabelControler.delete(@PathVariable("id") Long id) {
        labelService.delete(id);
        return new ResponseEntity(HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{label}", method = RequestMethod.GET, produces = MediaType.TEXT_HTML_VALUE)
    public String LabelControler.show(@PathVariable("label") Label label, Model model) {
        return "labels/show";
    }
    
    @RequestMapping(value = "/{id}/labeltranslations/", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public Page<LabelTranslation> LabelControler.listLabelTranslation(@PathVariable("id") Label id, GlobalSearch search, Pageable pageable) {
        Page<LabelTranslation> labelTranslation = labelTranslationService.findAllByLabel(id, search, pageable);
        return labelTranslation;
    }
    
    @RequestMapping(method = RequestMethod.GET, value = "/{id}/labeltranslations/", produces = "application/vnd.datatables+json")
    @ResponseBody
    public DatatablesData<LabelTranslation> LabelControler.listLabelTranslation(@PathVariable("id") Label id, GlobalSearch search, Pageable pageable, @RequestParam("draw") Integer draw) {
        Page<LabelTranslation> labelTranslation = listLabelTranslation(id, search, pageable);
        long allAvailableLabelTranslationDetails = labelTranslationService.countByLabelId(id.getId());
        return new DatatablesData<LabelTranslation>(labelTranslation, allAvailableLabelTranslationDetails, draw);
    }
    
    public void LabelControler.populateForm(Model model) {
        populateFomats(model);
    }
    
    public void LabelControler.populateFomats(Model model) {
        model.addAttribute("application_locale", LocaleContextHolder.getLocale().getLanguage());
    }
    
}
